package com.deezboiz.blackjack.strategy;

import com.deezboiz.blackjack.engine.Action;
import com.deezboiz.blackjack.engine.Card;
import com.deezboiz.blackjack.engine.Rank;

import java.util.HashMap;

class BasicStrategyTables {

    static HashMap<Card, HashMap<Card, Boolean>> splitTable = new HashMap<>();
    static {
        HashMap<Card, Boolean> playerTwo = new HashMap<>();
        playerTwo.put(new Card(null, new Rank(2)), true);
        playerTwo.put(new Card(null, new Rank(3)), true);
        playerTwo.put(new Card(null, new Rank(4)), true);
        playerTwo.put(new Card(null, new Rank(5)), true);
        playerTwo.put(new Card(null, new Rank(6)), true);
        playerTwo.put(new Card(null, new Rank(7)), true);
        playerTwo.put(new Card(null, new Rank(8)), false);
        playerTwo.put(new Card(null, new Rank(9)), false);
        playerTwo.put(new Card(null, new Rank(10)), false);
        playerTwo.put(new Card(null, new Rank(11)), false);
        playerTwo.put(new Card(null, new Rank(12)), false);
        playerTwo.put(new Card(null, new Rank(13)), false);
        playerTwo.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerThree = new HashMap<>();
        playerThree.put(new Card(null, new Rank(2)), true);
        playerThree.put(new Card(null, new Rank(3)), true);
        playerThree.put(new Card(null, new Rank(4)), true);
        playerThree.put(new Card(null, new Rank(5)), true);
        playerThree.put(new Card(null, new Rank(6)), true);
        playerThree.put(new Card(null, new Rank(7)), true);
        playerThree.put(new Card(null, new Rank(8)), false);
        playerThree.put(new Card(null, new Rank(9)), false);
        playerThree.put(new Card(null, new Rank(10)), false);
        playerThree.put(new Card(null, new Rank(11)), false);
        playerThree.put(new Card(null, new Rank(12)), false);
        playerThree.put(new Card(null, new Rank(13)), false);
        playerThree.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerFour = new HashMap<>();
        playerFour.put(new Card(null, new Rank(2)), false);
        playerFour.put(new Card(null, new Rank(3)), false);
        playerFour.put(new Card(null, new Rank(4)), false);
        playerFour.put(new Card(null, new Rank(5)), true);
        playerFour.put(new Card(null, new Rank(6)), true);
        playerFour.put(new Card(null, new Rank(7)), true);
        playerFour.put(new Card(null, new Rank(8)), false);
        playerFour.put(new Card(null, new Rank(9)), false);
        playerFour.put(new Card(null, new Rank(10)), false);
        playerFour.put(new Card(null, new Rank(11)), false);
        playerFour.put(new Card(null, new Rank(12)), false);
        playerFour.put(new Card(null, new Rank(13)), false);
        playerFour.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerFive = new HashMap<>();
        playerFive.put(new Card(null, new Rank(2)), false);
        playerFive.put(new Card(null, new Rank(3)), false);
        playerFive.put(new Card(null, new Rank(4)), false);
        playerFive.put(new Card(null, new Rank(5)), false);
        playerFive.put(new Card(null, new Rank(6)), false);
        playerFive.put(new Card(null, new Rank(7)), false);
        playerFive.put(new Card(null, new Rank(8)), false);
        playerFive.put(new Card(null, new Rank(9)), false);
        playerFive.put(new Card(null, new Rank(10)), false);
        playerFive.put(new Card(null, new Rank(11)), false);
        playerFive.put(new Card(null, new Rank(12)), false);
        playerFive.put(new Card(null, new Rank(13)), false);
        playerFive.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerSix = new HashMap<>();
        playerSix.put(new Card(null, new Rank(2)), true);
        playerSix.put(new Card(null, new Rank(3)), true);
        playerSix.put(new Card(null, new Rank(4)), true);
        playerSix.put(new Card(null, new Rank(5)), true);
        playerSix.put(new Card(null, new Rank(6)), true);
        playerSix.put(new Card(null, new Rank(7)), false);
        playerSix.put(new Card(null, new Rank(8)), false);
        playerSix.put(new Card(null, new Rank(9)), false);
        playerSix.put(new Card(null, new Rank(10)), false);
        playerSix.put(new Card(null, new Rank(11)), false);
        playerSix.put(new Card(null, new Rank(12)), false);
        playerSix.put(new Card(null, new Rank(13)), false);
        playerSix.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerSeven = new HashMap<>();
        playerSeven.put(new Card(null, new Rank(2)), true);
        playerSeven.put(new Card(null, new Rank(3)), true);
        playerSeven.put(new Card(null, new Rank(4)), true);
        playerSeven.put(new Card(null, new Rank(5)), true);
        playerSeven.put(new Card(null, new Rank(6)), true);
        playerSeven.put(new Card(null, new Rank(7)), true);
        playerSeven.put(new Card(null, new Rank(8)), false);
        playerSeven.put(new Card(null, new Rank(9)), false);
        playerSeven.put(new Card(null, new Rank(10)), false);
        playerSeven.put(new Card(null, new Rank(11)), false);
        playerSeven.put(new Card(null, new Rank(12)), false);
        playerSeven.put(new Card(null, new Rank(13)), false);
        playerSeven.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerEight = new HashMap<>();
        playerEight.put(new Card(null, new Rank(2)), true);
        playerEight.put(new Card(null, new Rank(3)), true);
        playerEight.put(new Card(null, new Rank(4)), true);
        playerEight.put(new Card(null, new Rank(5)), true);
        playerEight.put(new Card(null, new Rank(6)), true);
        playerEight.put(new Card(null, new Rank(7)), true);
        playerEight.put(new Card(null, new Rank(8)), true);
        playerEight.put(new Card(null, new Rank(9)), true);
        playerEight.put(new Card(null, new Rank(10)), true);
        playerEight.put(new Card(null, new Rank(11)), true);
        playerEight.put(new Card(null, new Rank(12)), true);
        playerEight.put(new Card(null, new Rank(13)), true);
        playerEight.put(new Card(null, new Rank(1)), true);

        HashMap<Card, Boolean> playerNine = new HashMap<>();
        playerNine.put(new Card(null, new Rank(2)), true);
        playerNine.put(new Card(null, new Rank(3)), true);
        playerNine.put(new Card(null, new Rank(4)), true);
        playerNine.put(new Card(null, new Rank(5)), true);
        playerNine.put(new Card(null, new Rank(6)), true);
        playerNine.put(new Card(null, new Rank(7)), false);
        playerNine.put(new Card(null, new Rank(8)), true);
        playerNine.put(new Card(null, new Rank(9)), true);
        playerNine.put(new Card(null, new Rank(10)), false);
        playerNine.put(new Card(null, new Rank(11)), false);
        playerNine.put(new Card(null, new Rank(12)), false);
        playerNine.put(new Card(null, new Rank(13)), false);
        playerNine.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerTen = new HashMap<>();
        playerTen.put(new Card(null, new Rank(2)), false);
        playerTen.put(new Card(null, new Rank(3)), false);
        playerTen.put(new Card(null, new Rank(4)), false);
        playerTen.put(new Card(null, new Rank(5)), false);
        playerTen.put(new Card(null, new Rank(6)), false);
        playerTen.put(new Card(null, new Rank(7)), false);
        playerTen.put(new Card(null, new Rank(8)), false);
        playerTen.put(new Card(null, new Rank(9)), false);
        playerTen.put(new Card(null, new Rank(10)), false);
        playerTen.put(new Card(null, new Rank(11)), false);
        playerTen.put(new Card(null, new Rank(12)), false);
        playerTen.put(new Card(null, new Rank(13)), false);
        playerTen.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerEleven = new HashMap<>();
        playerEleven.put(new Card(null, new Rank(2)), false);
        playerEleven.put(new Card(null, new Rank(3)), false);
        playerEleven.put(new Card(null, new Rank(4)), false);
        playerEleven.put(new Card(null, new Rank(5)), false);
        playerEleven.put(new Card(null, new Rank(6)), false);
        playerEleven.put(new Card(null, new Rank(7)), false);
        playerEleven.put(new Card(null, new Rank(8)), false);
        playerEleven.put(new Card(null, new Rank(9)), false);
        playerEleven.put(new Card(null, new Rank(10)), false);
        playerEleven.put(new Card(null, new Rank(11)), false);
        playerEleven.put(new Card(null, new Rank(12)), false);
        playerEleven.put(new Card(null, new Rank(13)), false);
        playerEleven.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerTwelve = new HashMap<>();
        playerTwelve.put(new Card(null, new Rank(2)), false);
        playerTwelve.put(new Card(null, new Rank(3)), false);
        playerTwelve.put(new Card(null, new Rank(4)), false);
        playerTwelve.put(new Card(null, new Rank(5)), false);
        playerTwelve.put(new Card(null, new Rank(6)), false);
        playerTwelve.put(new Card(null, new Rank(7)), false);
        playerTwelve.put(new Card(null, new Rank(8)), false);
        playerTwelve.put(new Card(null, new Rank(9)), false);
        playerTwelve.put(new Card(null, new Rank(10)), false);
        playerTwelve.put(new Card(null, new Rank(11)), false);
        playerTwelve.put(new Card(null, new Rank(12)), false);
        playerTwelve.put(new Card(null, new Rank(13)), false);
        playerTwelve.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerThirteen = new HashMap<>();
        playerThirteen.put(new Card(null, new Rank(2)), false);
        playerThirteen.put(new Card(null, new Rank(3)), false);
        playerThirteen.put(new Card(null, new Rank(4)), false);
        playerThirteen.put(new Card(null, new Rank(5)), false);
        playerThirteen.put(new Card(null, new Rank(6)), false);
        playerThirteen.put(new Card(null, new Rank(7)), false);
        playerThirteen.put(new Card(null, new Rank(8)), false);
        playerThirteen.put(new Card(null, new Rank(9)), false);
        playerThirteen.put(new Card(null, new Rank(10)), false);
        playerThirteen.put(new Card(null, new Rank(11)), false);
        playerThirteen.put(new Card(null, new Rank(12)), false);
        playerThirteen.put(new Card(null, new Rank(13)), false);
        playerThirteen.put(new Card(null, new Rank(1)), false);

        HashMap<Card, Boolean> playerAce = new HashMap<>();
        playerAce.put(new Card(null, new Rank(2)), true);
        playerAce.put(new Card(null, new Rank(3)), true);
        playerAce.put(new Card(null, new Rank(4)), true);
        playerAce.put(new Card(null, new Rank(5)), true);
        playerAce.put(new Card(null, new Rank(6)), true);
        playerAce.put(new Card(null, new Rank(7)), true);
        playerAce.put(new Card(null, new Rank(8)), true);
        playerAce.put(new Card(null, new Rank(9)), true);
        playerAce.put(new Card(null, new Rank(10)), true);
        playerAce.put(new Card(null, new Rank(11)), true);
        playerAce.put(new Card(null, new Rank(12)), true);
        playerAce.put(new Card(null, new Rank(13)), true);
        playerAce.put(new Card(null, new Rank(1)), true);
        
        splitTable.put(new Card(null, new Rank(2)), playerTwo);
        splitTable.put(new Card(null, new Rank(3)), playerThree);
        splitTable.put(new Card(null, new Rank(4)), playerFour);
        splitTable.put(new Card(null, new Rank(5)), playerFive);
        splitTable.put(new Card(null, new Rank(6)), playerSix);
        splitTable.put(new Card(null, new Rank(7)), playerSeven);
        splitTable.put(new Card(null, new Rank(8)), playerEight);
        splitTable.put(new Card(null, new Rank(9)), playerNine);
        splitTable.put(new Card(null, new Rank(10)), playerTen);
        splitTable.put(new Card(null, new Rank(11)), playerEleven);
        splitTable.put(new Card(null, new Rank(12)), playerTwelve);
        splitTable.put(new Card(null, new Rank(13)), playerThirteen);
        splitTable.put(new Card(null, new Rank(1)), playerAce);
    }

    static HashMap<Integer, HashMap<Card, Action>> softTable = new HashMap<>();
    static {
        HashMap<Card, Action> playerTwoThree = new HashMap<>();
        playerTwoThree.put(new Card(null, new Rank(2)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(3)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(4)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(5)), Action.DOUBLE);
        playerTwoThree.put(new Card(null, new Rank(6)), Action.DOUBLE);
        playerTwoThree.put(new Card(null, new Rank(7)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(8)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(9)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(10)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(11)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(12)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(13)), Action.HIT);
        playerTwoThree.put(new Card(null, new Rank(1)), Action.HIT);

        HashMap<Card, Action> playerFourFive = new HashMap<>();
        playerFourFive.put(new Card(null, new Rank(2)), Action.HIT);
        playerFourFive.put(new Card(null, new Rank(3)), Action.HIT);
        playerFourFive.put(new Card(null, new Rank(4)), Action.DOUBLE);
        playerFourFive.put(new Card(null, new Rank(5)), Action.DOUBLE);
        playerFourFive.put(new Card(null, new Rank(6)), Action.DOUBLE);
        playerFourFive.put(new Card(null, new Rank(7)), Action.HIT);
        playerFourFive.put(new Card(null, new Rank(8)), Action.HIT);
        playerFourFive.put(new Card(null, new Rank(9)), Action.HIT);
        playerFourFive.put(new Card(null, new Rank(10)), Action.HIT);
        playerFourFive.put(new Card(null, new Rank(11)), Action.HIT);
        playerFourFive.put(new Card(null, new Rank(12)), Action.HIT);
        playerFourFive.put(new Card(null, new Rank(13)), Action.HIT);
        playerFourFive.put(new Card(null, new Rank(1)), Action.HIT);

        HashMap<Card, Action> playerSix = new HashMap<>();
        playerSix.put(new Card(null, new Rank(2)), Action.HIT);
        playerSix.put(new Card(null, new Rank(3)), Action.DOUBLE);
        playerSix.put(new Card(null, new Rank(4)), Action.DOUBLE);
        playerSix.put(new Card(null, new Rank(5)), Action.DOUBLE);
        playerSix.put(new Card(null, new Rank(6)), Action.DOUBLE);
        playerSix.put(new Card(null, new Rank(7)), Action.HIT);
        playerSix.put(new Card(null, new Rank(8)), Action.HIT);
        playerSix.put(new Card(null, new Rank(9)), Action.HIT);
        playerSix.put(new Card(null, new Rank(10)), Action.HIT);
        playerSix.put(new Card(null, new Rank(11)), Action.HIT);
        playerSix.put(new Card(null, new Rank(12)), Action.HIT);
        playerSix.put(new Card(null, new Rank(13)), Action.HIT);
        playerSix.put(new Card(null, new Rank(1)), Action.HIT);

        HashMap<Card, Action> playerSeven = new HashMap<>();
        playerSeven.put(new Card(null, new Rank(2)), Action.DOUBLE);
        playerSeven.put(new Card(null, new Rank(3)), Action.DOUBLE);
        playerSeven.put(new Card(null, new Rank(4)), Action.DOUBLE);
        playerSeven.put(new Card(null, new Rank(5)), Action.DOUBLE);
        playerSeven.put(new Card(null, new Rank(6)), Action.DOUBLE);
        playerSeven.put(new Card(null, new Rank(7)), Action.STAY);
        playerSeven.put(new Card(null, new Rank(8)), Action.STAY);
        playerSeven.put(new Card(null, new Rank(9)), Action.HIT);
        playerSeven.put(new Card(null, new Rank(10)), Action.HIT);
        playerSeven.put(new Card(null, new Rank(11)), Action.HIT);
        playerSeven.put(new Card(null, new Rank(12)), Action.HIT);
        playerSeven.put(new Card(null, new Rank(13)), Action.HIT);
        playerSeven.put(new Card(null, new Rank(1)), Action.HIT);

        HashMap<Card, Action> playerEight = new HashMap<>();
        playerEight.put(new Card(null, new Rank(2)), Action.STAY);
        playerEight.put(new Card(null, new Rank(3)), Action.STAY);
        playerEight.put(new Card(null, new Rank(4)), Action.STAY);
        playerEight.put(new Card(null, new Rank(5)), Action.STAY);
        playerEight.put(new Card(null, new Rank(6)), Action.DOUBLE);
        playerEight.put(new Card(null, new Rank(7)), Action.STAY);
        playerEight.put(new Card(null, new Rank(8)), Action.STAY);
        playerEight.put(new Card(null, new Rank(9)), Action.STAY);
        playerEight.put(new Card(null, new Rank(10)), Action.STAY);
        playerEight.put(new Card(null, new Rank(11)), Action.STAY);
        playerEight.put(new Card(null, new Rank(12)), Action.STAY);
        playerEight.put(new Card(null, new Rank(13)), Action.STAY);
        playerEight.put(new Card(null, new Rank(1)), Action.STAY);

        HashMap<Card, Action> playerNine = new HashMap<>();
        playerNine.put(new Card(null, new Rank(2)), Action.STAY);
        playerNine.put(new Card(null, new Rank(3)), Action.STAY);
        playerNine.put(new Card(null, new Rank(4)), Action.STAY);
        playerNine.put(new Card(null, new Rank(5)), Action.STAY);
        playerNine.put(new Card(null, new Rank(6)), Action.STAY);
        playerNine.put(new Card(null, new Rank(7)), Action.STAY);
        playerNine.put(new Card(null, new Rank(8)), Action.STAY);
        playerNine.put(new Card(null, new Rank(9)), Action.STAY);
        playerNine.put(new Card(null, new Rank(10)), Action.STAY);
        playerNine.put(new Card(null, new Rank(11)), Action.STAY);
        playerNine.put(new Card(null, new Rank(12)), Action.STAY);
        playerNine.put(new Card(null, new Rank(13)), Action.STAY);
        playerNine.put(new Card(null, new Rank(1)), Action.STAY);

        softTable.put(2, playerTwoThree);
        softTable.put(3, playerTwoThree);
        softTable.put(4, playerFourFive);
        softTable.put(5, playerFourFive);
        softTable.put(6, playerSix);
        softTable.put(7, playerSeven);
        softTable.put(8, playerEight);
        softTable.put(9, playerNine);
    }

    static HashMap<Integer, HashMap<Card, Action>> hardTable = new HashMap<>();
    static {
        HashMap<Card, Action> playerFourToEight = new HashMap<>();
        playerFourToEight.put(new Card(null, new Rank(2)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(3)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(4)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(5)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(6)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(7)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(8)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(9)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(10)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(11)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(12)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(13)), Action.HIT);
        playerFourToEight.put(new Card(null, new Rank(1)), Action.HIT);

        HashMap<Card, Action> playerNine = new HashMap<>();
        playerNine.put(new Card(null, new Rank(2)), Action.HIT);
        playerNine.put(new Card(null, new Rank(3)), Action.DOUBLE);
        playerNine.put(new Card(null, new Rank(4)), Action.DOUBLE);
        playerNine.put(new Card(null, new Rank(5)), Action.DOUBLE);
        playerNine.put(new Card(null, new Rank(6)), Action.DOUBLE);
        playerNine.put(new Card(null, new Rank(7)), Action.HIT);
        playerNine.put(new Card(null, new Rank(8)), Action.HIT);
        playerNine.put(new Card(null, new Rank(9)), Action.HIT);
        playerNine.put(new Card(null, new Rank(10)), Action.HIT);
        playerNine.put(new Card(null, new Rank(11)), Action.HIT);
        playerNine.put(new Card(null, new Rank(12)), Action.HIT);
        playerNine.put(new Card(null, new Rank(13)), Action.HIT);
        playerNine.put(new Card(null, new Rank(1)), Action.HIT);

        HashMap<Card, Action> playerTen = new HashMap<>();
        playerTen.put(new Card(null, new Rank(2)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(3)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(4)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(5)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(6)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(7)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(8)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(9)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(10)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(11)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(12)), Action.DOUBLE);
        playerTen.put(new Card(null, new Rank(13)), Action.HIT);
        playerTen.put(new Card(null, new Rank(1)), Action.HIT);

        HashMap<Card, Action> playerEleven = new HashMap<>();
        playerEleven.put(new Card(null, new Rank(2)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(3)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(4)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(5)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(6)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(7)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(8)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(9)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(10)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(11)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(12)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(13)), Action.DOUBLE);
        playerEleven.put(new Card(null, new Rank(1)), Action.DOUBLE);

        HashMap<Card, Action> playerTwelve = new HashMap<>();
        playerTwelve.put(new Card(null, new Rank(2)), Action.HIT);
        playerTwelve.put(new Card(null, new Rank(3)), Action.HIT);
        playerTwelve.put(new Card(null, new Rank(4)), Action.STAY);
        playerTwelve.put(new Card(null, new Rank(5)), Action.STAY);
        playerTwelve.put(new Card(null, new Rank(6)), Action.STAY);
        playerTwelve.put(new Card(null, new Rank(7)), Action.HIT);
        playerTwelve.put(new Card(null, new Rank(8)), Action.HIT);
        playerTwelve.put(new Card(null, new Rank(9)), Action.HIT);
        playerTwelve.put(new Card(null, new Rank(10)), Action.HIT);
        playerTwelve.put(new Card(null, new Rank(11)), Action.HIT);
        playerTwelve.put(new Card(null, new Rank(12)), Action.HIT);
        playerTwelve.put(new Card(null, new Rank(13)), Action.HIT);
        playerTwelve.put(new Card(null, new Rank(1)), Action.HIT);

        HashMap<Card, Action> playerThirteenToSixteen = new HashMap<>();
        playerThirteenToSixteen.put(new Card(null, new Rank(2)), Action.STAY);
        playerThirteenToSixteen.put(new Card(null, new Rank(3)), Action.STAY);
        playerThirteenToSixteen.put(new Card(null, new Rank(4)), Action.STAY);
        playerThirteenToSixteen.put(new Card(null, new Rank(5)), Action.STAY);
        playerThirteenToSixteen.put(new Card(null, new Rank(6)), Action.STAY);
        playerThirteenToSixteen.put(new Card(null, new Rank(7)), Action.HIT);
        playerThirteenToSixteen.put(new Card(null, new Rank(8)), Action.HIT);
        playerThirteenToSixteen.put(new Card(null, new Rank(9)), Action.HIT);
        playerThirteenToSixteen.put(new Card(null, new Rank(10)), Action.HIT);
        playerThirteenToSixteen.put(new Card(null, new Rank(11)), Action.HIT);
        playerThirteenToSixteen.put(new Card(null, new Rank(12)), Action.HIT);
        playerThirteenToSixteen.put(new Card(null, new Rank(13)), Action.HIT);
        playerThirteenToSixteen.put(new Card(null, new Rank(1)), Action.HIT);

        HashMap<Card, Action> playerSeventeenToTwenty = new HashMap<>();
        playerSeventeenToTwenty.put(new Card(null, new Rank(2)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(3)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(4)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(5)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(6)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(7)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(8)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(9)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(10)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(11)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(12)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(13)), Action.STAY);
        playerSeventeenToTwenty.put(new Card(null, new Rank(1)), Action.STAY);

        softTable.put(4, playerFourToEight);
        softTable.put(5, playerFourToEight);
        softTable.put(6, playerFourToEight);
        softTable.put(7, playerFourToEight);
        softTable.put(8, playerFourToEight);
        softTable.put(9, playerNine);
        softTable.put(10, playerTen);
        softTable.put(11, playerEleven);
        softTable.put(12, playerTwelve);
        softTable.put(13, playerThirteenToSixteen);
        softTable.put(14, playerThirteenToSixteen);
        softTable.put(15, playerThirteenToSixteen);
        softTable.put(16, playerThirteenToSixteen);
        softTable.put(17, playerSeventeenToTwenty);
        softTable.put(18, playerSeventeenToTwenty);
        softTable.put(19, playerSeventeenToTwenty);
        softTable.put(20, playerSeventeenToTwenty);
    }

}
